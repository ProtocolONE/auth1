// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import bson "github.com/globalsign/mgo/bson"
import mock "github.com/stretchr/testify/mock"
import models "github.com/ProtocolONE/auth1.protocol.one/pkg/models"

// MfaServiceInterface is an autogenerated mock type for the MfaServiceInterface type
type MfaServiceInterface struct {
	mock.Mock
}

// Add provides a mock function with given fields: _a0
func (_m *MfaServiceInterface) Add(_a0 *models.MfaProvider) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.MfaProvider) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddUserProvider provides a mock function with given fields: _a0
func (_m *MfaServiceInterface) AddUserProvider(_a0 *models.MfaUserProvider) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.MfaUserProvider) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: _a0
func (_m *MfaServiceInterface) Get(_a0 bson.ObjectId) (*models.MfaProvider, error) {
	ret := _m.Called(_a0)

	var r0 *models.MfaProvider
	if rf, ok := ret.Get(0).(func(bson.ObjectId) *models.MfaProvider); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.MfaProvider)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bson.ObjectId) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserProviders provides a mock function with given fields: _a0
func (_m *MfaServiceInterface) GetUserProviders(_a0 *models.User) ([]*models.MfaProvider, error) {
	ret := _m.Called(_a0)

	var r0 []*models.MfaProvider
	if rf, ok := ret.Get(0).(func(*models.User) []*models.MfaProvider); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.MfaProvider)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: _a0
func (_m *MfaServiceInterface) List(_a0 bson.ObjectId) ([]*models.MfaProvider, error) {
	ret := _m.Called(_a0)

	var r0 []*models.MfaProvider
	if rf, ok := ret.Get(0).(func(bson.ObjectId) []*models.MfaProvider); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.MfaProvider)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bson.ObjectId) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
