// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import models "github.com/ProtocolONE/auth1.protocol.one/pkg/models"

// OneTimeTokenServiceInterface is an autogenerated mock type for the OneTimeTokenServiceInterface type
type OneTimeTokenServiceInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *OneTimeTokenServiceInterface) Create(_a0 interface{}, _a1 *models.OneTimeTokenSettings) (*models.OneTimeToken, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *models.OneTimeToken
	if rf, ok := ret.Get(0).(func(interface{}, *models.OneTimeTokenSettings) *models.OneTimeToken); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OneTimeToken)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, *models.OneTimeTokenSettings) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *OneTimeTokenServiceInterface) Get(_a0 string, _a1 interface{}) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Use provides a mock function with given fields: _a0, _a1
func (_m *OneTimeTokenServiceInterface) Use(_a0 string, _a1 interface{}) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
