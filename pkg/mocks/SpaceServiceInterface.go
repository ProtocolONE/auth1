// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	bson "github.com/globalsign/mgo/bson"
	mock "github.com/stretchr/testify/mock"

	models "github.com/ProtocolONE/auth1.protocol.one/pkg/models"
)

// SpaceServiceInterface is an autogenerated mock type for the SpaceServiceInterface type
type SpaceServiceInterface struct {
	mock.Mock
}

// AddIdentityProvider provides a mock function with given fields: space, ip
func (_m *SpaceServiceInterface) AddIdentityProvider(space *models.Space, ip *models.AppIdentityProvider) error {
	ret := _m.Called(space, ip)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Space, *models.AppIdentityProvider) error); ok {
		r0 = rf(space, ip)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSpace provides a mock function with given fields: _a0
func (_m *SpaceServiceInterface) CreateSpace(_a0 *models.Space) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Space) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSpace provides a mock function with given fields: _a0
func (_m *SpaceServiceInterface) GetSpace(_a0 bson.ObjectId) (*models.Space, error) {
	ret := _m.Called(_a0)

	var r0 *models.Space
	if rf, ok := ret.Get(0).(func(bson.ObjectId) *models.Space); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Space)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bson.ObjectId) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIdentityProvider provides a mock function with given fields: space, ip
func (_m *SpaceServiceInterface) UpdateIdentityProvider(space *models.Space, ip *models.AppIdentityProvider) error {
	ret := _m.Called(space, ip)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Space, *models.AppIdentityProvider) error); ok {
		r0 = rf(space, ip)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSpace provides a mock function with given fields: _a0
func (_m *SpaceServiceInterface) UpdateSpace(_a0 *models.Space) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Space) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
