// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"

	models "github.com/ProtocolONE/auth1.protocol.one/pkg/models"

	service "github.com/ProtocolONE/auth1.protocol.one/pkg/service"
)

// AuthLogServiceInterface is an autogenerated mock type for the AuthLogServiceInterface type
type AuthLogServiceInterface struct {
	mock.Mock
}

// Add provides a mock function with given fields: reqctx, kind, identity, app, provider
func (_m *AuthLogServiceInterface) Add(reqctx echo.Context, kind service.AuthActionType, identity *models.UserIdentity, app *models.Application, provider *models.AppIdentityProvider) error {
	ret := _m.Called(reqctx, kind, identity, app, provider)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, service.AuthActionType, *models.UserIdentity, *models.Application, *models.AppIdentityProvider) error); ok {
		r0 = rf(reqctx, kind, identity, app, provider)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: userId, count, from
func (_m *AuthLogServiceInterface) Get(userId string, count int, from string) ([]*service.AuthorizeLog, error) {
	ret := _m.Called(userId, count, from)

	var r0 []*service.AuthorizeLog
	if rf, ok := ret.Get(0).(func(string, int, string) []*service.AuthorizeLog); ok {
		r0 = rf(userId, count, from)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*service.AuthorizeLog)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int, string) error); ok {
		r1 = rf(userId, count, from)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByDevice provides a mock function with given fields: deviceID, count, from
func (_m *AuthLogServiceInterface) GetByDevice(deviceID string, count int, from string) ([]*service.AuthorizeLog, error) {
	ret := _m.Called(deviceID, count, from)

	var r0 []*service.AuthorizeLog
	if rf, ok := ret.Get(0).(func(string, int, string) []*service.AuthorizeLog); ok {
		r0 = rf(deviceID, count, from)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*service.AuthorizeLog)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int, string) error); ok {
		r1 = rf(deviceID, count, from)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
