// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/micro/go-micro/client"

	mock "github.com/stretchr/testify/mock"

	proto "github.com/ProtocolONE/mfa-service/pkg/proto"
)

// MfaApiInterface is an autogenerated mock type for the MfaApiInterface type
type MfaApiInterface struct {
	mock.Mock
}

// Check provides a mock function with given fields: ctx, in, opts
func (_m *MfaApiInterface) Check(ctx context.Context, in *proto.MfaCheckDataRequest, opts ...client.CallOption) (*proto.MfaCheckDataResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.MfaCheckDataResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.MfaCheckDataRequest, ...client.CallOption) *proto.MfaCheckDataResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.MfaCheckDataResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.MfaCheckDataRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, in, opts
func (_m *MfaApiInterface) Create(ctx context.Context, in *proto.MfaCreateDataRequest, opts ...client.CallOption) (*proto.MfaCreateDataResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.MfaCreateDataResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.MfaCreateDataRequest, ...client.CallOption) *proto.MfaCreateDataResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.MfaCreateDataResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.MfaCreateDataRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
