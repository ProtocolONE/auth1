openapi: 3.0.0
servers:
# Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/ProtocolOne/Authentication/1.0.0
  - url: 'https://auth.protocol.one'
info:
  description: Basic methods for registration and authentication
  version: 1.0.0
  title: ProtocolOne Authentication API
  termsOfService: ''
  contact:
    email: vadim.sabirov@protocol.one
    name: Vadim Sabirov
    url: 'https://protocol.one'
tags:
  - name: Signup
    description: Create a new user
  - name: Login
    description: ''
  - name: Logout
    description: Use this endpoint to logout a user
  - name: Passwordless
    description: One-time code sent through email or SMS, every time the user logs in
  - name: Change Password
    description: Send message to change password
  - name: Get User Info
    description: Get user information by Access Token
  - name: Multi-Factor Authentication
    description: Management multifactor authentication the Multi-Factor Authentication
  - name: JWT Token
    description: JWT user's token
paths:
  /logout:
    get:
      tags:
        - Logout
      summary: Clears all single sign-on cookies set by Auth1 for the user
      description: >-
        Redirecting the user to this URL clears all single sign-on cookies set
        by Auth1 for the user.<br><br>The Auth1 logout endpoint logs you out
        from Auth1 and, optionally, from your identity provider. It does not log
        you out of your application! This is something that you must implement
        on your side. You need to log out the user from your application by
        clearing their session.<br><br>SAML logout is configured differently
        depending on whether Auth1 acts as the Service Provider (i.e. when you
        create a SAML connection) or when Auth1 acts as the Identity Provider
        (i.e. when you have an application with the SAML2 Web App addon).
      operationId: logout
      parameters:
        - name: redirect_uri
          in: query
          description: >-
            URL to redirect the user after the logout.<br><br>To redirect a user
            after logout, add a `redirect_uri` querystring parameter with the
            target URL as the value. We suggest that you encode the target URL
            being passed in.<br><br>You will need to add the non-encoded
            `redirect_uri` URL as an Allowed Logout URLs in the application
            settings.
          required: false
          schema:
            type: integer
            format: int64
          allowEmptyValue: false
        - name: client_id
          in: query
          required: false
          schema:
            type: string
          description: >-
            The `client_id` of your application.<br><br>If the `client_id`
            parameter is included, the returnTo URL must be listed in the
            Allowed Logout URLs set at the application level (see Setting
            Allowed Logout URLs at the App Level)<br><br>If the `client_id`
            parameter is NOT included, the `returnTo` URL must be listed in the
            Allowed Logout URLs set at the tenant level (see Setting Allowed
            Logout URLs at the Space Level)
      responses:
        '200':
          description: Return `OK` if `returnTo` is not installed or not allowed.
        '302':
          description: >-
            Redirect to the URL defined in the parameter `returnTo` if it is
            specified and allowed.
      security:
        - CookieAuth: []
    description: >-
      The Auth1 logout endpoint logs you out from Auth1 and, optionally, from
      your identity provider. It does not log you out of your application! This
      is something that you must implement on your side. You need to log out the
      user from your application by clearing their session.
  /passwordless/start:
    post:
      tags:
      - Passwordless
      summary: ''
      description: >-
        Send a verification code using email or send.
      parameters:
        - name: client_id
          in: query
          required: true
          schema:
            type: string
          description: 'The `client_id` of your application'
        - name: connection
          in: query
          required: true
          schema:
            type: string
          description: >-
            How to send the code to the user. Use `email` to send the
            code using email, or `sms` to use SMS
      operationId: passwordlessStart
      responses:
        '200':
          description: Return One-time token for verification method
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OneTimeToken'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /passwordless/verify:
    post:
      tags:
      - Passwordless
      summary: ''
      description: 'Verify passwordless authentication code'
      parameters:
        - name: client_id
          in: query
          required: true
          schema:
            type: string
          description: 'The `client_id` of your application'
        - name: connection
          in: query
          required: true
          schema:
            type: string
          description: >-
            How to send the code to the user. Use `email` to send the
            code using email, or `sms` to use SMS
        - name: verification_code
          in: query
          required: true
          schema:
            type: string
          description: 'Verification code from sms or email (One-time password)'
        - name: token
          in: query
          required: false
          schema:
            type: string
          description: 'One-time token'
      operationId: passwordlessVerify
      responses:
        '200':
          description: 'Return user Access Token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWTToken'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /user/info:
    get:
      tags:
      - Get User Info
      summary: ''
      description: 'Given the Access Token obtained during login, this endpoint returns a user''s profile.'
      parameters:
        - name: access_token
          in: query
          required: true
          schema:
            type: string
          description: 'The `Access Token` obtained during login'
      operationId: userInfo
      responses:
        '200':
          description: 'Return user info.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
  /token/refresh:
    get:
      tags:
      - JWT Token
      summary: ''
      description: 'Get new user Access Token by Refresh Token'
      parameters:
        - name: client_id
          in: query
          required: true
          schema:
            type: string
          description: 'The `client_id` of your application'
        - name: token
          in: query
          required: true
          schema:
            type: string
          description: 'Refresh token'
      operationId: tokenRefresh
      responses:
        '200':
          description: 'Return user access tokens.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWTToken'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
  /dbconnections/change_password:
    post:
      tags:
      - Change Password
      summary: ''
      description: 'Given a user''s `email` address and a `connection`, Auth1 will send a change password email.'
      parameters:
        - name: client_id
          in: query
          required: true
          schema:
            type: string
          description: 'The `client_id` of your application'
        - name: connection
          in: query
          required: true
          schema:
            type: string
          description: 'The name of the database connection configured to your client'
        - name: email
          in: query
          required: false
          schema:
            type: string
          description: 'The user''s email address'
      operationId: changePasswordStart                                                        
      responses:
        '200':
          description: Return One-time token for verification method
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OneTimeToken'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /dbconnections/change_password/verify:
    post:
      tags:
      - Change Password
      summary: ''
      description: 'Verify change password code'
      parameters:
        - name: client_id
          in: query
          required: true
          schema:
            type: string
          description: 'The `client_id` of your application'
        - name: connection
          in: query
          required: true
          schema:
            type: string
          description: 'The name of the database connection configured to your client'
        - name: verification_code
          in: query
          required: true
          schema:
            type: string
          description: 'Verification code from email'
        - name: token
          in: query
          required: false
          schema:
            type: string
          description: 'One-time token'
        - name: password
          in: query
          required: false
          schema:
            type: string
          description: 'The new password'
      operationId: changePasswordVerify
      responses:
        '200':
          description: 'Return user Access Token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWTToken'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /signup:
    post:
      tags:
      - Signup
      summary: ''
      description: 'Create a new user using database connection.'
      parameters:
        - name: client_id
          in: query
          required: true
          schema:
            type: string
          description: 'The `client_id` of your application'
        - name: connection
          in: query
          required: true
          schema:
            type: string
          description: 'The name of the database connection configured to your client'
        - name: email
          in: query
          required: false
          schema:
            type: string
          description: 'The user''s email address'
        - name: password
          in: query
          required: false
          schema:
            type: string
          description: 'The user''s desired password'      
      operationId: signup
      responses:
        '200':
          description: 'Return user Access Token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWTToken'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /authorize:
    get:
      tags:
      - Login
      summary: ''
      description: 'Use this endpoint to authenticate a user with a social. It will return a 302 redirect to the social provider specified in connection. The `redirect_uri` value must be specified as a valid callback URL under your Application''s Settings.'
      parameters:
        - name: client_id
          in: query
          required: true
          schema:
            type: string
          description: 'The `client_id` of your application'
        - name: connection
          in: query
          required: true
          schema:
            type: string
          description: 'The name of a social identity provider configured to your application, for example `google-oauth2` or `facebook`'
        - name: redirect_uri
          in: query
          required: true
          schema:
            type: string
          description: 'The URL to which will redirect the browser after authorization has been granted by the user'
        - name: state
          in: query
          required: false
          schema:
            type: string
          description: 'An opaque value the applications adds to the initial request that the authorization server includes when redirecting the back to the application. This value must be used by the application to prevent CSRF attacks.'
        - name: ADDITIONAL_PARAMETERS
          in: query
          required: false
          schema:
            type: string
          description: 'Append any additional parameter to the end of your request, and it will be sent to the provider. For example, access_type=offline (for Google Refresh Tokens) , display=popup (for Windows Live popup mode)'
      operationId: authorize
      responses:
        '302':
          description: 'Redirect to destination URI with OTP'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OneTimeToken'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /login:
    post:
      tags:
      - Login
      summary: ''
      description: 'Use this endpoint to authenticate a user with database connection.'
      parameters:
        - name: client_id
          in: query
          required: true
          schema:
            type: string
          description: 'The `client_id` of your application'
        - name: connection
          in: query
          required: true
          schema:
            type: string
          description: 'The name of the connection configured to your application'
        - name: email
          in: query
          required: false
          schema:
            type: string
          description: 'The user''s email address'
        - name: password
          in: query
          required: false
          schema:
            type: string
          description: 'The user''s desired password'
        - name: captcha
          in: query
          required: false
          schema:
            type: string
          description: 'Captcha'
      operationId: login
      responses:
        '200':
          description: 'Get user Access Token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWTToken'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: MFA required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /mfa/challenge:
    post:
      tags:
      - Multi-Factor Authentication
      summary: ''
      description: 'Request a challenge based on the challenge types supported by the application and user.'
      parameters:
        - name: client_id
          in: query
          required: true
          schema:
            type: string
          description: 'The `client_id` of your application'
        - name: connection
          in: query
          required: true
          schema:
            type: string
          description: 'The name of the connection configured to your application'
        - name: mfa_token
          in: query
          required: true
          schema:
            type: string
          description: 'MFA token from authenticate response'
        - name: challenge_type
          in: query
          required: false
          schema:
            type: integer
          description: 'Set `otp` for use one-time password or set `oob` for use out-of-band message (sms). If the parameter is not set, then priority is given to the type of `otp`, if it is connected.'
      operationId: mfaChallenge
      responses:
        '200':
          description: 'Get user Access Token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWTToken'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /mfa/verify:
    post:
      tags:
      - Multi-Factor Authentication
      summary: ''
      description: 'Use this endpoint to authenticate a user with MFA.'
      parameters:
        - name: client_id
          in: query
          required: true
          schema:
            type: string
          description: 'The `client_id` of your application'
        - name: connection
          in: query
          required: true
          schema:
            type: string
          description: 'The name of the connection configured to your application'
        - name: mfa_token
          in: query
          required: true
          schema:
            type: string
          description: 'MFA token from authenticate response'
        - name: code
          in: query
          required: false
          schema:
            type: integer
          description: 'OTP, OOB or Recovery code'
      operationId: mfaVerify
      responses:
        '200':
          description: 'Get user Access Token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWTToken'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /mfa/add:
    post:
      tags:
      - Multi-Factor Authentication
      summary: ''
      description: 'Add authenticator to the user.'
      parameters:
        - name: client_id
          in: query
          required: true
          schema:
            type: string
          description: 'The `client_id` of your application'
        - name: connection
          in: query
          required: true
          schema:
            type: string
          description: 'The name of the connection configured to your application'
        - name: authenticator_types
          in: query
          required: true
          schema:
            type: string
          description: 'Set `otp` for use one-time password or set `oob` for use out-of-band message (sms)'
        - name: oob_channel
          in: query
          required: false
          schema:
            type: string
          description: 'The type of OOB channels supported by the client. An array with values `auth1` or `sms`. Required if authenticator_types include `oob`'
        - name: phone_number
          in: query
          required: false
          schema:
            type: string
          description: 'The phone number to use for SMS. Required if `oob_channel` includes `sms`'
      operationId: mfaAdd
      responses:
        '200':
          description: 'Get added MFA settings'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewMFA'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
externalDocs:
  description: ''
  url: 'https://auth.protocol.one/openapi'
components:
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          example: bad_request
        error_message:
          type: string
          example: The connection was not found
        mfa_request:
          type: string
          example: abcde...dasg
          description: This is an optional parameter and appears when you need to go through multi-factor authentication. The parameter value is a token that should be transferred to the MFA method.
    User:
      type: object
      properties:
        id:
          type: string
          example: b62klDf0HeiJdNMv8K263nfE
        email:
          type: string
          example: test@test.com
        email_verified:
          type: boolean
          example: false
        created_at:
          type: string
          example: "2016-11-02T15:05:21.311Z"
        updated_at:
          type: string
          example: "2016-12-05T15:15:40.545Z"
    JWTToken:
      type: object
      properties:
        access_token:
          type: string
          example: oDnPKc1a...vWE36Lh
        expires_in:
          type: integer
          format: int32
          example: 3600
        id_token:
          type: string
          description: Refresh token
          example: oDnPKc1a...vWE36Lh
    OneTimePassword:
      type: object
      description: 'One-Time Password'
      properties:
        token:
          type: integer
          example: 123456
    OneTimeToken:
      type: object
      description: 'One-Time Token'
      properties:
        token:
          type: string
          example: oDnPKc1a...vWE36Lh
    NewMFA:
      type: object
      properties:
        secret:
          type: string
          example: oDnPKc1a...vWE36Lh
          description: Use for OTP authentificator
        oob_channel:
          type: string
          example: sms
          description: Use for OBB authentificator. Must be `sms` or `auth1`
        barcode_uri:
          type: string
          example: otpauth://...
        authenticator_type:
          type: string
          description: '`otp` or `oob`'
          example: otp
        recovery_codes:
          type: array
          items:
            type: string
          example: ["ABCDEFGDRFK75ABYR7PH8TJA"]
  requestBodies: {}
  securitySchemes:
    CookieAuth:
      type: apiKey
      in: cookie
      name: X-AUTH1-TOKEN-{CLIENT_ID}
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  links: {}
  callbacks: {}
security:
  - CookieAuth: []
  - BearerAuth: []